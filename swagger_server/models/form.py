# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.question import Question  # noqa: F401,E501
from swagger_server import util


class Form(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, questions: List[Question]=None):  # noqa: E501
        """Form - a model defined in Swagger

        :param id: The id of this Form.  # noqa: E501
        :type id: str
        :param title: The title of this Form.  # noqa: E501
        :type title: str
        :param questions: The questions of this Form.  # noqa: E501
        :type questions: List[Question]
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'questions': List[Question]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'questions': 'questions'
        }
        self._id = id
        self._title = title
        self._questions = questions

    @classmethod
    def from_dict(cls, dikt) -> 'Form':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Form of this Form.  # noqa: E501
        :rtype: Form
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Form.


        :return: The id of this Form.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Form.


        :param id: The id of this Form.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Form.


        :return: The title of this Form.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Form.


        :param title: The title of this Form.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def questions(self) -> List[Question]:
        """Gets the questions of this Form.


        :return: The questions of this Form.
        :rtype: List[Question]
        """
        return self._questions

    @questions.setter
    def questions(self, questions: List[Question]):
        """Sets the questions of this Form.


        :param questions: The questions of this Form.
        :type questions: List[Question]
        """
        if questions is None:
            raise ValueError("Invalid value for `questions`, must not be `None`")  # noqa: E501

        self._questions = questions
