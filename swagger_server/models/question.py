# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.option import Option  # noqa: F401,E501
from swagger_server import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, text: str=None, options: List[Option]=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param id: The id of this Question.  # noqa: E501
        :type id: str
        :param text: The text of this Question.  # noqa: E501
        :type text: str
        :param options: The options of this Question.  # noqa: E501
        :type options: List[Option]
        """
        self.swagger_types = {
            'id': str,
            'text': str,
            'options': List[Option]
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'options': 'options'
        }
        self._id = id
        self._text = text
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Question.


        :return: The id of this Question.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Question.


        :param id: The id of this Question.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this Question.


        :return: The text of this Question.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Question.


        :param text: The text of this Question.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def options(self) -> List[Option]:
        """Gets the options of this Question.


        :return: The options of this Question.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options: List[Option]):
        """Sets the options of this Question.


        :param options: The options of this Question.
        :type options: List[Option]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options
